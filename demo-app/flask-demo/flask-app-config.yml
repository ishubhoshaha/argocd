apiVersion: v1
kind: Namespace
metadata:
  name: flask-app

---
apiVersion: v1
kind: ConfigMap
metadata:
  name: game-demo
data:
  # property-like keys; each key maps to a simple value
  player_initial_lives: "3"
  ui_properties_file_name: "user-interface.properties"

  # file-like keys
  game.properties: |
    enemy.types=aliens,monsters
    player.maximum-lives=5    
  user-interface.properties: |
    color.good=purple
    color.bad=yellow
    allow.textmode=true    
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name:  python-example
  namespace: flask-app
  labels:
    app:  python-example
spec:
  selector:
    matchLabels:
      app: python-example
  replicas: 2
  strategy:
    rollingUpdate:
      maxSurge: 1
      maxUnavailable: 0
    type: RollingUpdate
  template:
    metadata:
      labels:
        app:  python-example
    spec:
      # initContainers:
      # Init containers are exactly like regular containers, except:
      # - Init containers always run to completion.
      # - Each init container must complete successfully before the next one starts.
      containers:
        - name:  python-example
          image:  ishubhoshaha/flask-k8
          imagePullPolicy: Always
          resources:
            requests:
              cpu: 100m
              memory: 100Mi
            limits:
              cpu: 100m
              memory: 100Mi
          ports:
            - containerPort:  5000
              name:  python-example

---

apiVersion: v1
kind: Service
metadata:
  name: python-service
  namespace: flask-app
spec:
  selector:
    app: python-example
  type: NodePort
  ports:
    - name: python-example-service-port
      port: 5000
      targetPort: 5000
      protocol: TCP
      nodePort: 30005
